---
title:      'Android IoT BigData Sketch Ideas'
categories: [ideate, design]
heroimage:  'android-iot-big-data.jpeg'
excerpt:    'Android + IoT and Big Data is a very wide range field to investigate. Let’s briefly describe what we have.'
 
---

extends ../../views/layouts/_single

block content
  :marked
    Android & IoT & BigData
    =======================

    Android
    -------

    Android + IoT and Big Data is a very wide range field to investigate. Let’s briefly describe what the Android operating system is.

    It’s an open source "OS" platform based on Dalvik Java Virtual Machine (JVM) where all apps are like a containers, similar to the Java OSGi containers concept. _Note that we know that Dalvik will soon migrate from Java to OpenJDK._

    When we “open” or are “running” Android Applications (container) we are launching Android Activity. Each activity has its own UI layout, or run as the background process. All activities are assigned to the Application Container that has spawned them. If a user closes the application, some processes and activities will be destroyed. But some types of processes can survive and run in the background, until the user forces them to stop on demand. Activities can be a fully functional application view and fit full screen or take a part of the screen, like a widget. Or the activity may not have a View and notify the user through the notification bar.

    All activities have defined lifecycle states and phase events so we can control how applications will behave when the phase is changing.

    http://developer.android.com/reference/android/app/Activity.html

    onCreate – function that is invoked when an activity has been created

    onDestroy – function that is invoked when an activity has been destroyed

    When an activity is running, it could serve any logic and start the different types of intentions to let other Applications do their part of the job. Android Applications are able to send different types of intentions (for example: edit graphic picture, send email, sharing something, and custom intentions as well). In this instance, another application is subscribing to listen to intentions so the other application can spawn. An example is where Photoshop/Picasa/Instagram is subscribing somewhere in their Activities to listen to intentions of a user to edit a picture and provides a mechanism to get this picture from the App to send intentions and can then provide a result back to that App. Android has a lot of sensors, detectors, and different kinds of tech sweets and extras such as camera, mic, barometer, gyroscope, accelerometer, health care detectors, light sensors, GPS, GSM, CDMA, Wi-Fi, Bluetooth… And in near future smartphone hardware can also became customizable (As we can see Google attemps with in the Ara Project). 

    To get familiar with Android developing first, try to install Code Editor (IDE) based on Intellij IDEA <http://developer.android.com/sdk/index.html> and create basic predefined projects to investigate where you are locating source files, and other resources. Or, as an alternative, you can use Eclipse ide and install the plugin <http://developer.android.com/tools/sdk/eclipse-adt.html>.

    The next step is to launch the Android Virtual Device or connect the real device to the PC where IDE is installed. Then try to trace and debug. <http://developer.android.com/tools/debugging/debugging-tracing.html>

    To move closer to the IoT field you need to investigate the following Android Libraries:

    -   android.util - The core utility package contains low-level classes like specialized containers, string formatters, and XML parsing utilities.

    -   android.os - The operating system package provides access to basic operating system services like message passing, interprocess communication, clock functions, and debugging.

    -   android.graphics - The graphics API provides the low-level graphics classes that support canvases, colors, and drawing primitives and lets you draw on canvases.

    -   android.text - The text processing tools for displaying and parsing texts.

    -   android.database - Supplies the low-level classes required for handling cursors when working with databases.

    -   android.content - The content API is used to manage data access and publishing by providing services for dealing with resources, content providers, and packages.

    -   android.view - Views are the core user interface class. All user interface elements are constructed using a series of views to provide the user interaction components.

    -   android.widget - Built on the View package, the widget classes are the “here is one we created earlier” user-interface element for you to use in your applications. They include lists, buttons, and layouts.

    -   com.google.android.maps - A high leel API that provides access to native map controls that you can use within your application. Includes the MapView control as well as the Overlay and MapController classes used to annotate and control your embedded maps.

    -   android.app - A high-level package that provides access to the application model. The application package includes the Activity and Service APIs that form the basis for all your Android applications.

    -   android.provider - To ease developer access to certain standard Content Providers( such as the contacts database), the Provider package offers classes to provide access to standard databases included in all Android distributions.

    -   android.telephony - The telephony APIs give you the ability to directly interact with the device’s phone stack, letting you make, receive, and monitor phone calls, phone status and SMS messages.

    -   android.webkit - The webkit package features APIs for working with Web-based content, including a WebView control for embedding browsers in your activities and a cookie manager.

    -   android.location - The location-based services API gives your applications access to the device’s current physical location. Location-based services provide generic access to location information using whatever position-fixing hardware or technology is available on the device.

        -   The media APIs provide support for playback and recording of audio and video media files, including streamed media.

    -   android.opengl - Android offers a powerful 3D rendering engine using the OpenGL ES API that you can use to create dynamic 3D user interfaces for your applications.

    -   android.hardware - Where available, the hardware API exposes sensor hardware including the camera, accelerometer. and compass sensors.

    -   android.bluetooth, android.net.wifi, android.telephony - Android also provides low-level access to the hardware platform, including Bluetooth, Wi-Fi, and telephony hardware. This allows android to be launched on any device (coffee machine, refrigerator, home security station or other) and has built in libraries and functionality (GSM, WIFI, etc.) to help us achieve results.

    IoT
    ---

    Let’s dive in and start to investigate how we can implement the power of Android OS on different types of devices.

    Let’s first define two types’ of wearables:

    1.  Controller based devices: <https://www.arduino.cc/en/Main/GenuinoProducts>

    2.  PC types devices: Intel Edison, RaspberryPI, Smartphones.

    The first one is a controller based system that is not using a HDD file system or any popular OS, allowing flexibility to the Controller Board. From the first second after it is plugged in, it starts working without the dependency of a HDD, or having to wait for boot loading time from an OS, and the algorithm that controls the sensors, detectors, and motors is uploading on the board chip immediately.

    In the original Arduino IDE, we are working with a kind of C language (<https://www.arduino.cc/en/Reference/HomePage>). Basically, we can divide all programs into two blocks of code. First, one is all custom functions and logics that a developer can write. The second block is a void loop() function where the looping is defined by developer sequence. _Note: I would recommend basic Arduino Starter Kit <http://bit.ly/1Su4Pv2>._ 

    Next is a PC type device that is a fully functional pc that computes and has installed an OS. It is also supported by an OS file system on HDD (EXT4, FAT32, NTFS…).

    The type of device that should be used depends on your goals and what you want to create.

    BigData
    -------

    Let’s very briefly think about Big Data. It’s a way to find correlations between some behaviors and results. But some say it is human evolution that will impact every business and life on this planet.

    We can also think about Big Data as taking large data sets that may be analyzed to reveal patterns, trends, and associations, especially relating to human behavior and interactions. Check out this link to see what expert's on Big Data expect for 2016:
    <https://www.import.io/post/22-data-experts-share-their-predictions-for-2016/>

    I am now driving a car while listening to  Chapter 7. Of VIKTOR MAYER-SCHONBERGER AND KENNETH CUKIER audio book from Amazon Audible and and they give a nice formula to understand Big Data:

    An image is a single instance of a data sample and presents a simple picture. But, if we add the variable TIME, it could be a movie. This helps us understand the meaning of an image differently; we now see a movie as a collection of images ordered in time, and each frame of that movie is correlated to a unique time variable. This same concept can be applied to the current digital era as it is growing while I am typing and producing new data. So just a matter of how we view the data, can give us an interest correlation. Like VIKTOR mentions in 'BigData mind set,' a certain state of a mind can help a person see new oportunities, from a different point of view; or, just analyze Terabytes of someone's experience.  

    Big companies already have enough data to predict peoples shopping, traveling, chilling etc. and as a result BigData Food Chains have appeared where companies start selling data as operators and government take his own place. These days, people have started looking at how Infinity Data can predict future, optimize their lives, and help others. So if you want be a super hero now days you can just analyze something in Infinity Data and help humanity to reach the stars =)

    So in the next articles we will look at how we can combine everything together and launch some sort of Server, locally docker container, or AWS EC container (on preview 1 year free membership subscription) to compute correlation of data from sensors and detectors. Or something else…
